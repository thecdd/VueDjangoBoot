"""
Django settings for VueDjango project.

Generated by 'django-admin startproject' using Django 1.9.5.

For more information on this file, see
https://docs.djangoproject.com/en/1.9/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.9/ref/settings/
"""

import os
from . import env

BASE_DIR = env.PROJECT_BASE_DIR

SECRET_KEY = 'w$rx@%b_0^&+q)84_e6vwz-0yqpd7cnx!-=pyhq9ix^$)mo(cj'

DEBUG = env.IS_DEV

ALLOWED_HOSTS = ['*']

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'webpack_loader',
    'rest_framework',
    'modules.index',
]

MIDDLEWARE_CLASSES = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'VueDjango.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR + '/modules'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'VueDjango.wsgi.application'

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}

# Password validation
# https://docs.djangoproject.com/en/1.9/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/1.9/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

STATIC_URL = env.SITE_CONFIG.get('static_url')

STATIC_ROOT = os.path.join(BASE_DIR, 'static')

STATICFILES_DIRS = (
    os.path.join(BASE_DIR, "static/common"),
)

STATICFILES_FINDERS = (
    "django.contrib.staticfiles.finders.FileSystemFinder",
    "django.contrib.staticfiles.finders.AppDirectoriesFinder",
    'compressor.finders.CompressorFinder',
)

WEBPACK_LOADER = {
    'DEFAULT': {
        'CACHE': not DEBUG,
        'BUNDLE_DIR_NAME': 'bundles/',
        'STATS_FILE': os.path.join(BASE_DIR, 'webpack-stats.json'),
        'POLL_INTERVAL': 0.1,
        'TIMEOUT': None,
        'IGNORE': ['.+\.hot-update.js', '.+\.map']
    }
}

# MONGO-ENGINE SESSION

MONGOENGINE_SESSION_COLLECTION = 'fm_user_session'
SESSION_ENGINE = 'mongoengine.django.sessions'
SESSION_EXPIRE_AT_BROWSER_CLOSE = True
SESSION_COOKIE_AGE = env.SITE_CONFIG.get('session_time')
SESSION_COOKIE_NAME = env.SITE_CONFIG.get('session_name')
CSRF_COOKIE_NAME = env.SITE_CONFIG.get('csrftoken_name')

# LOG
LOGGING = {
    'version': 1,
    'disable_existing_loggers': True,
    'formatters': {
        'standard': {
            'format': '%(asctime)s [%(threadName)s:%(thread)d] [%(name)s:%(lineno)d] [%(levelname)s]- %(message)s'
        },
    },
    'filters': {
    },
    'handlers': {
        'console': {
            'level': env.SITE_CONFIG.get('log_level'),
            'class': 'logging.StreamHandler',
            'formatter': 'standard'
        },
        'default': {
            'level': env.SITE_CONFIG.get('log_level'),
            'class': 'core.tool.logers.TimedCompressedRotatingFileHandler',
            'filename': os.path.join(env.SITE_CONFIG.get('log_path'), 'all.log'),
            'formatter': 'standard',
            'when': 'D',
            'interval': 1,
        },
        'exception_handler': {
            'level': env.SITE_CONFIG.get('log_level'),
            'class': 'core.tool.logers.TimedCompressedRotatingFileHandler',
            'filename': os.path.join(env.SITE_CONFIG.get('log_path'), 'exception.log'),
            'formatter': 'standard',
            'when': 'D',
            'interval': 1,
        },
        'request_handler': {
            'level': env.SITE_CONFIG.get('log_level'),
            'class': 'core.tool.logers.TimedCompressedRotatingFileHandler',
            'filename': os.path.join(env.SITE_CONFIG.get('log_path'), 'request.log'),
            'formatter': 'standard',
            'when': 'D',
            'interval': 1,
        },
        'scripts_handler': {
            'level': env.SITE_CONFIG.get('log_level'),
            'class': 'core.tool.logers.TimedCompressedRotatingFileHandler',
            'filename': os.path.join(env.SITE_CONFIG.get('log_path'), 'script.log'),
            'formatter': 'standard',
            'when': 'D',
            'interval': 1,
        },
    },
    'loggers': {
        'core': {
            'handlers': ['default', 'console'],
            'level': env.SITE_CONFIG.get('log_level'),
            'propagate': True
        },
        'django': {
            'handlers': ['default', 'console'],
            'level': env.SITE_CONFIG.get('log_level'),
            'propagate': False
        },
        'django.request': {
            'handlers': ['request_handler'],
            'level': env.SITE_CONFIG.get('log_level'),
            'propagate': False
        },
        'exception': {
            'handlers': (['console', 'exception_handler'] if DEBUG else ['exception_handler']),
            'level': env.SITE_CONFIG.get('log_level'),
            'propagate': False
        },
        'scripts': {
            'handlers': ['scripts_handler'],
            'level': env.SITE_CONFIG.get('log_level'),
            'propagate': False
        },
    }
}
